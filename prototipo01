
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

void main() {
  runApp(const ArtistProfileApp());
}

class ArtistProfileApp extends StatelessWidget {
  const ArtistProfileApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Perfil do Artista',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.deepPurple,
          secondary: Colors.amberAccent,
        ),
        useMaterial3: true,
        textTheme: const TextTheme(
          headlineLarge: TextStyle(fontSize: 32, fontWeight: FontWeight.bold, color: Colors.deepPurple),
          headlineMedium: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.deepPurple),
          bodyLarge: TextStyle(fontSize: 16, color: Colors.black87),
          bodyMedium: TextStyle(fontSize: 14, color: Colors.black54),
        ),
      ),
      home: const ArtistProfilePage( // Agora ArtistProfilePage também pode ser const
        artistName: 'Imagine Dragons',
        genre: 'Rock',
        bio:
            'Imagine Dragons é uma banda de pop rock formada em Las Vegas nos Estados Unidos, consistindo do vocalista Dan Reynolds, do guitarrista Wayne Sermon e do baixista Ben McKee.',
        albums: [
          'Loom (2024)',
          'Mercury - act 1(2021)',
          
        ],
        featuredSong: 'Música Destaque: "Radioactive"',
        awards: [
          'Melhor Álbum Eletrônico (2023)',
          'Banda Revelação Internacional (2022)',
        ],
        socialLinks: {
          'Instagram':'https://www.instagram.com/imaginedragons/',
          'Spotify': 'https://spotify.com/artist/imaginedragons',
          'YouTube': 'https://www.youtube.com/user/ImagineDragons',
        },
        fansCount: 300000,
      ),
    );
  }
}

class ArtistProfilePage extends StatelessWidget {
  final String artistName;
  final String genre;
  final String bio;
  final List<String> albums;
  final String featuredSong;
  final List<String> awards;
  final Map<String, String> socialLinks;
  final int fansCount;

  const ArtistProfilePage({
    super.key,
    required this.artistName,
    required this.genre,
    required this.bio,
    required this.albums,
    required this.featuredSong,
    required this.awards,
    required this.socialLinks,
    required this.fansCount,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: _ArtistAppBar(artistName: artistName),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _ArtistHeader(artistName: artistName, genre: genre),
            const SizedBox(height: 24),
            Text('Biografia', style: Theme.of(context).textTheme.headlineMedium),
            const SizedBox(height: 8),
            Text(bio, style: Theme.of(context).textTheme.bodyLarge, textAlign: TextAlign.justify),
            const SizedBox(height: 24),
            Text('Álbuns', style: Theme.of(context).textTheme.headlineMedium),
            const SizedBox(height: 8),
            SizedBox(
              height: 100,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: albums.length,
                itemBuilder: (context, index) => _AlbumListItem(album: albums[index]),
              ),
            ),
            const SizedBox(height: 16),
            Text(
              featuredSong,
              style: Theme.of(context).textTheme.bodyLarge!.copyWith(fontStyle: FontStyle.italic),
            ),
            const SizedBox(height: 24),
            if (awards.isNotEmpty) ...[
              Text('Prêmios', style: Theme.of(context).textTheme.headlineMedium),
              const SizedBox(height: 8),
              ...awards.map((award) => _AwardListItem(award: award)),
            ],
            const SizedBox(height: 24),
            Text('Redes Sociais', style: Theme.of(context).textTheme.headlineMedium),
            const SizedBox(height: 8),
            Wrap(
              spacing: 12,
              runSpacing: 12,
              children: socialLinks.entries.map<Widget>((socialLink) => _SocialMediaIcon(socialLink: socialLink)).toList(),
            ),
            const SizedBox(height: 24),
            _FansCount(fansCount: fansCount),
          ],
        ),
      ),
    );
  }
}

class _ArtistAppBar extends StatelessWidget implements PreferredSizeWidget {
  final String artistName;

  const _ArtistAppBar({required this.artistName});

  @override
  Size get preferredSize => const Size.fromHeight(kToolbarHeight);

  @override
  Widget build(BuildContext context) {
    return AppBar(
      title: Text('Perfil de $artistName'),
      backgroundColor: Theme.of(context).colorScheme.primary,
      foregroundColor: Theme.of(context).colorScheme.onPrimary,
    );
  }
}

class _ArtistHeader extends StatelessWidget {
  final String artistName;
  final String genre;

  const _ArtistHeader({required this.artistName, required this.genre});

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        const CircleAvatar(
          radius: 60,
          backgroundImage: NetworkImage('https://i.pravatar.cc/300?img=68'),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(artistName, style: Theme.of(context).textTheme.headlineLarge),
              const SizedBox(height: 4),
              Text(
                genre,
                style: Theme.of(context).textTheme.bodyLarge!.copyWith(
                      color: Theme.of(context).colorScheme.secondary,
                      fontWeight: FontWeight.bold,
                    ),
              ),
              const SizedBox(height: 8),
              const Row(
                children: [
                  Icon(Icons.verified, color: Colors.blue, size: 16),
                  SizedBox(width: 4),
                  Text('Verificado', style: TextStyle(fontSize: 14, color: Colors.black54)),
                ],
              ),
            ],
          ),
        ),
      ],
    );
  }
}

class _AlbumListItem extends StatelessWidget {
  final String album;

  const _AlbumListItem({required this.album});

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Center(
          child: Text(album, textAlign: TextAlign.center),
        ),
      ),
    );
  }
}

class _AwardListItem extends StatelessWidget {
  final String award;

  const _AwardListItem({required this.award});

  @override
  Widget build(BuildContext context) {
    return ListTile(
      leading: const Icon(Icons.military_tech, color: Colors.amber),
      title: Text(award, style: Theme.of(context).textTheme.bodyLarge),
    );
  }
}

class _SocialMediaIcon extends StatelessWidget {
  final MapEntry<String, String> socialLink;

  const _SocialMediaIcon({required this.socialLink});

  @override
  Widget build(BuildContext context) {
    IconData icon;
    switch (socialLink.key.toLowerCase()) {
      case 'instagram':
        icon = Icons.camera_alt;
        break;
      case 'spotify':
        icon = Icons.music_note;
        break;
      case 'youtube':
        icon = Icons.play_arrow;
        break;
      case 'twitter':
        icon = Icons.flutter_dash;
        break;
      case 'website':
        icon = Icons.web;
        break;
      default:
        icon = Icons.link;
    }
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        IconButton(
          icon: Icon(icon, color: Theme.of(context).colorScheme.primary),
          tooltip: socialLink.key,
          onPressed: () {
            print('Abrir ${socialLink.key}: ${socialLink.value}');
          },
        ),
        Text(socialLink.key, style: Theme.of(context).textTheme.bodyMedium),
      ],
    );
  }
}

class _FansCount extends StatelessWidget {
  final int fansCount;

  const _FansCount({required this.fansCount});

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        const Icon(Icons.people, color: Colors.grey),
        const SizedBox(width: 8),
        Text(
          '${NumberFormat.compact().format(fansCount)} Fãs',
          style: Theme.of(context).textTheme.bodyMedium,
        ),
      ],
    );
  }
}
